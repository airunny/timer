// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.24.3
// source: timer/v1/service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	common "timer/api/common"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationServiceAddApplication = "/api.timer.v1.Service/AddApplication"
const OperationServiceAddTimer = "/api.timer.v1.Service/AddTimer"
const OperationServiceDeleteApplication = "/api.timer.v1.Service/DeleteApplication"
const OperationServiceDeleteTimer = "/api.timer.v1.Service/DeleteTimer"
const OperationServiceGetApplication = "/api.timer.v1.Service/GetApplication"
const OperationServiceGetTimer = "/api.timer.v1.Service/GetTimer"
const OperationServiceHealthy = "/api.timer.v1.Service/Healthy"
const OperationServiceListApplication = "/api.timer.v1.Service/ListApplication"
const OperationServiceListTimer = "/api.timer.v1.Service/ListTimer"
const OperationServiceReplayTimer = "/api.timer.v1.Service/ReplayTimer"
const OperationServiceUpdateApplication = "/api.timer.v1.Service/UpdateApplication"

type ServiceHTTPServer interface {
	// AddApplication 应用
	AddApplication(context.Context, *AddApplicationRequest) (*Application, error)
	// AddTimer 定时器
	AddTimer(context.Context, *AddTimerRequest) (*AddTimerReply, error)
	DeleteApplication(context.Context, *DeleteApplicationRequest) (*DeleteApplicationReply, error)
	DeleteTimer(context.Context, *DeleteTimerRequest) (*DeleteTimerReply, error)
	GetApplication(context.Context, *GetApplicationRequest) (*Application, error)
	GetTimer(context.Context, *GetTimerRequest) (*Timer, error)
	Healthy(context.Context, *common.EmptyRequest) (*common.HealthyReply, error)
	ListApplication(context.Context, *ListApplicationRequest) (*ListApplicationReply, error)
	ListTimer(context.Context, *ListTimerRequest) (*ListTimerReply, error)
	ReplayTimer(context.Context, *ReplayTimerRequest) (*ReplayTimerReply, error)
	UpdateApplication(context.Context, *UpdateApplicationRequest) (*UpdateApplicationReply, error)
}

func RegisterServiceHTTPServer(s *http.Server, srv ServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/healthz", _Service_Healthy0_HTTP_Handler(srv))
	r.POST("/v1/app", _Service_AddApplication0_HTTP_Handler(srv))
	r.GET("/v1/app/{id}", _Service_GetApplication0_HTTP_Handler(srv))
	r.DELETE("/v1/app/{id}", _Service_DeleteApplication0_HTTP_Handler(srv))
	r.PUT("/v1/app/{id}", _Service_UpdateApplication0_HTTP_Handler(srv))
	r.GET("/v1/app", _Service_ListApplication0_HTTP_Handler(srv))
	r.POST("/v1/timer", _Service_AddTimer0_HTTP_Handler(srv))
	r.GET("/v1/timer/{id}", _Service_GetTimer0_HTTP_Handler(srv))
	r.DELETE("/v1/timer/{id}", _Service_DeleteTimer0_HTTP_Handler(srv))
	r.GET("/v1/timer/{id}/replay", _Service_ReplayTimer0_HTTP_Handler(srv))
	r.GET("/v1/timer", _Service_ListTimer0_HTTP_Handler(srv))
}

func _Service_Healthy0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in common.EmptyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceHealthy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Healthy(ctx, req.(*common.EmptyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.HealthyReply)
		return ctx.Result(200, reply)
	}
}

func _Service_AddApplication0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddApplicationRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAddApplication)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddApplication(ctx, req.(*AddApplicationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Application)
		return ctx.Result(200, reply)
	}
}

func _Service_GetApplication0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetApplicationRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceGetApplication)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetApplication(ctx, req.(*GetApplicationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Application)
		return ctx.Result(200, reply)
	}
}

func _Service_DeleteApplication0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteApplicationRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceDeleteApplication)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteApplication(ctx, req.(*DeleteApplicationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteApplicationReply)
		return ctx.Result(200, reply)
	}
}

func _Service_UpdateApplication0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateApplicationRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUpdateApplication)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateApplication(ctx, req.(*UpdateApplicationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateApplicationReply)
		return ctx.Result(200, reply)
	}
}

func _Service_ListApplication0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListApplicationRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceListApplication)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListApplication(ctx, req.(*ListApplicationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListApplicationReply)
		return ctx.Result(200, reply)
	}
}

func _Service_AddTimer0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddTimerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAddTimer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddTimer(ctx, req.(*AddTimerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddTimerReply)
		return ctx.Result(200, reply)
	}
}

func _Service_GetTimer0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTimerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceGetTimer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTimer(ctx, req.(*GetTimerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Timer)
		return ctx.Result(200, reply)
	}
}

func _Service_DeleteTimer0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteTimerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceDeleteTimer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteTimer(ctx, req.(*DeleteTimerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteTimerReply)
		return ctx.Result(200, reply)
	}
}

func _Service_ReplayTimer0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReplayTimerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceReplayTimer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReplayTimer(ctx, req.(*ReplayTimerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReplayTimerReply)
		return ctx.Result(200, reply)
	}
}

func _Service_ListTimer0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListTimerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceListTimer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListTimer(ctx, req.(*ListTimerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListTimerReply)
		return ctx.Result(200, reply)
	}
}

type ServiceHTTPClient interface {
	AddApplication(ctx context.Context, req *AddApplicationRequest, opts ...http.CallOption) (rsp *Application, err error)
	AddTimer(ctx context.Context, req *AddTimerRequest, opts ...http.CallOption) (rsp *AddTimerReply, err error)
	DeleteApplication(ctx context.Context, req *DeleteApplicationRequest, opts ...http.CallOption) (rsp *DeleteApplicationReply, err error)
	DeleteTimer(ctx context.Context, req *DeleteTimerRequest, opts ...http.CallOption) (rsp *DeleteTimerReply, err error)
	GetApplication(ctx context.Context, req *GetApplicationRequest, opts ...http.CallOption) (rsp *Application, err error)
	GetTimer(ctx context.Context, req *GetTimerRequest, opts ...http.CallOption) (rsp *Timer, err error)
	Healthy(ctx context.Context, req *common.EmptyRequest, opts ...http.CallOption) (rsp *common.HealthyReply, err error)
	ListApplication(ctx context.Context, req *ListApplicationRequest, opts ...http.CallOption) (rsp *ListApplicationReply, err error)
	ListTimer(ctx context.Context, req *ListTimerRequest, opts ...http.CallOption) (rsp *ListTimerReply, err error)
	ReplayTimer(ctx context.Context, req *ReplayTimerRequest, opts ...http.CallOption) (rsp *ReplayTimerReply, err error)
	UpdateApplication(ctx context.Context, req *UpdateApplicationRequest, opts ...http.CallOption) (rsp *UpdateApplicationReply, err error)
}

type ServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewServiceHTTPClient(client *http.Client) ServiceHTTPClient {
	return &ServiceHTTPClientImpl{client}
}

func (c *ServiceHTTPClientImpl) AddApplication(ctx context.Context, in *AddApplicationRequest, opts ...http.CallOption) (*Application, error) {
	var out Application
	pattern := "/v1/app"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceAddApplication))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) AddTimer(ctx context.Context, in *AddTimerRequest, opts ...http.CallOption) (*AddTimerReply, error) {
	var out AddTimerReply
	pattern := "/v1/timer"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceAddTimer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) DeleteApplication(ctx context.Context, in *DeleteApplicationRequest, opts ...http.CallOption) (*DeleteApplicationReply, error) {
	var out DeleteApplicationReply
	pattern := "/v1/app/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceDeleteApplication))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) DeleteTimer(ctx context.Context, in *DeleteTimerRequest, opts ...http.CallOption) (*DeleteTimerReply, error) {
	var out DeleteTimerReply
	pattern := "/v1/timer/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceDeleteTimer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) GetApplication(ctx context.Context, in *GetApplicationRequest, opts ...http.CallOption) (*Application, error) {
	var out Application
	pattern := "/v1/app/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceGetApplication))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) GetTimer(ctx context.Context, in *GetTimerRequest, opts ...http.CallOption) (*Timer, error) {
	var out Timer
	pattern := "/v1/timer/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceGetTimer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) Healthy(ctx context.Context, in *common.EmptyRequest, opts ...http.CallOption) (*common.HealthyReply, error) {
	var out common.HealthyReply
	pattern := "/healthz"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceHealthy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) ListApplication(ctx context.Context, in *ListApplicationRequest, opts ...http.CallOption) (*ListApplicationReply, error) {
	var out ListApplicationReply
	pattern := "/v1/app"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceListApplication))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) ListTimer(ctx context.Context, in *ListTimerRequest, opts ...http.CallOption) (*ListTimerReply, error) {
	var out ListTimerReply
	pattern := "/v1/timer"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceListTimer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) ReplayTimer(ctx context.Context, in *ReplayTimerRequest, opts ...http.CallOption) (*ReplayTimerReply, error) {
	var out ReplayTimerReply
	pattern := "/v1/timer/{id}/replay"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceReplayTimer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) UpdateApplication(ctx context.Context, in *UpdateApplicationRequest, opts ...http.CallOption) (*UpdateApplicationReply, error) {
	var out UpdateApplicationReply
	pattern := "/v1/app/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceUpdateApplication))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
